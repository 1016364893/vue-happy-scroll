(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global['happy-scroll'] = {})));
}(this, (function (exports) { 'use strict';

/**
 * 绑定事件
 *
 * @export
 * @param {any} dom
 * @param {any} eventType
 * @param {any} callback
 */
function on(dom, eventType, callback){
  if(document.addEventListener){
      dom.addEventListener(eventType, callback);
  }else{
      dom.attachEvent('on' + eventType, callback);
  }
}

/**
* 解绑事件
*
* @export
* @param {any} dom
* @param {any} eventType
* @param {any} callback
*/
function off(dom, eventType, callback){
  if(document.addEventListener){
      dom.removeEventListener(eventType, callback);
  }else{
      dom.detachEvent('on' + eventType, callback);
  }
}

/**
 * 节流函数生成器
 * 对于调用频繁的地方，可保障在设置时间内只执行1次。
 * 使用方法:
 *
 * const currentThrottle = generateThrottle() //生成一个节流函数
 * currentThrottle(Data.now()) //如果超过了阈值则返回true，否则返回false
 *
 * @param throttleTime 设置此生成器的阈值
 */
const generateThrottle = function (throttleTime) {
  let time = Date.now();
  return function (now) {
    //如果没有设置节流时间， 使用默认配置的时间 14毫秒
    if (now - time > (throttleTime || 14)) {
      time = now;
      return true;
    }
  }
};

var HappyScrollStrip = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"stripContainer",staticClass:"happy-scroll-strip",class:[_vm.horizontal ? 'happy-scroll-strip--horizontal' : 'happy-scroll-strip--vertical'],style:([_vm.initLocation]),on:{"!wheel":function($event){$event.stopPropagation();_vm.handlerWheel($event);}}},[_c('div',{ref:"strip",staticClass:"scrollBar",style:([_vm.translate, _vm.initStrip, _vm.initSize, {background: _vm.color}]),on:{"mousedown":function($event){$event.stopPropagation();_vm.handlerMouseDown($event);}}})])},staticRenderFns: [],
  name: 'happy-scroll-strip',
  props: {
    //是否作为横向
    horizontal: Boolean,
    //使竖向滚动条在居左
    left: Boolean,
    //使横向滚动条居右
    top: Boolean,
    percentage: {
      type: Number,
      required: true
    },
    move: {
      type: Number,
      default: 0
    },
    //滚动条的宽(对于横向时为高度)
    size: {
      type: [Number, String],
      default: 4
    },
    //滚动条的背景色
    color: {
      type: String,
      default: 'rgba(51,51,51,0.2)'
    },
    //鼠标移动的节流函数时间, 表示该时间内鼠标移动的回调保障在该时间内只执行一次
    throttle: {
      type: Number,
      default: 14 //默认14毫秒
    }
  },
  data() {
    return {
      config: {},
      //标记鼠标按下后开始移动的状态. 鼠标按下为true 抬起为 false
      startMove: false,
      //为document绑定事件, 此状态值为了避免重复绑定
      binded: false,
      //滚动条的宽或者高
      length: 0,
      //鼠标移动的节流函数
      moveThrottle: generateThrottle(this.throttle)
    }
  },
  computed: {
    //初始化宽度(横向时为高度)
    initSize () {
      return {
        [this.horizontal ? 'height' : 'width'] : this.size + 'px'
      }
    },
    /**
     * 初始化滚动条的长度, 这个方法会被执行两次。
     */
    initStrip() {
      const container = this.$refs.stripContainer;   //滚动条本身

      if (!this.percentage && !container) {
        return
      }
      //滚动条的高度或宽度 = 滚动条容器(100%高) * 百分比(外层内容与容器的比例)
      const number = container[this.config.client] * this.percentage;
      this.length = number;
      //根据 水平还是垂直方向 决定初始化滚动条的 宽还是高
      return {
        [this.config.sizeAttr]: `${number}px`
      }
    },
    /**
     * 变化滚动条的位置，scroll主体内容，滚动时，滚动条跟着联动
     */
    translate() {
      return {
        transform: `${this.config.translate}(${this.move * this.percentage}px)`
      }
    },
    //初始化滚动条位置
    initLocation(){
      if(this.horizontal){
        return this.top ? { top: 0, bottom: 'auto' } : ''
      }
      return this.left ? { left: 0, right: 'auto'} : ''
    }
  },
  methods: {
    bindEvents() {
      //已绑定过了 不再重复绑定
      if (this.binded) return
      on(document, 'mouseup', this.handlerMouseUp);
      on(document, 'mousemove', this.handlerMove);
      this.binded = true;
    },
    //鼠标按下事件
    handlerMouseDown(event) {
      //只有鼠标左键可以拖动
      this.startMove = true;
      //记录鼠标起始的位置
      this.axis = event[this.config.clientAxis];
      //给document绑定 mouseup与mousemove
      this.bindEvents();
    },
    handlerMouseUp() {
      //鼠标抬起, 结束拖拽状态
      this.startMove = false;
    },
    handlerMove(event) {

      //如果不是在鼠标按下的状态 || 节流控制，在指定时间内只执行一次
      if (!this.startMove || !this.moveThrottle(Date.now())) return

      event.preventDefault();
      event.stopImmediatePropagation();

      const parentRect = this.$refs.stripContainer.getBoundingClientRect(),
            rect = this.$refs.strip.getBoundingClientRect();
      //相对于滚动条容器的offset
      const contrastParentOffset = rect[this.config.direction] - parentRect[this.config.direction];
      /**
       * offset = 鼠标移动的偏移量 + 滚动条当前的偏移量
       * offset为滚动条需要移动到的位置
       * event[this.config.clientAxis] - this.axis = 鼠标移动后与移动前的偏移量
       */
      const offset = event[this.config.clientAxis] - this.axis + contrastParentOffset;
      //更新鼠标偏移量的值
      this.axis = event[this.config.clientAxis];

      this.changeOffset(offset);
    },
    //鼠标滚轮滚动事件
    handlerWheel(event) {
      const parentRect = this.$refs.stripContainer.getBoundingClientRect(),
            rect = this.$refs.strip.getBoundingClientRect();
      //滚动条相对于容器的offset
      const contrastParentOffset = rect[this.config.direction] - parentRect[this.config.direction];
      //滚动条最终要设置的偏移量    event[this.config.wheelDelta] => 获取鼠标滚轮的滚动值
      const offset = contrastParentOffset + event[this.config.wheelDelta];

      this.changeOffset(offset, event);
    },
    changeOffset(offset, event) {

      const rect = this.$refs.stripContainer.getBoundingClientRect(),
            maxOffset = rect[this.config.sizeAttr] - this.length;

      //防止滚动条越界
      if (offset < 0) {
        offset = 0;
      }

      //防止滚动条越界
      if (offset > maxOffset) {
        offset = maxOffset;
      }

      if (event && 0 < offset && offset < maxOffset) {
        event.preventDefault();
        event.stopImmediatePropagation();
      }

      //偏移
      this.$refs.strip.style.transform = `${this.config.translate}(${offset}px)`;

      //告诉scroll.vue 滚动条移动的偏移量
      this.$emit('input', offset);
    }
  },
  created() {
    const configs = {
      //水平的属性配置
      h: {
        sizeAttr: 'width',
        client: 'clientWidth',
        clientAxis: "clientX",
        translate: 'translateX',
        direction: 'left',
        wheelDelta: 'deltaX'
      },
      //垂直的属性配置
      v: {
        sizeAttr: 'height',         //滚动条的高度
        client: 'clientHeight',     //滚动条容器的可视高度
        clientAxis: "clientY",      //拖动滚动条时，鼠标移动的Y轴坐标值
        translate: 'translateY',    //上下移动滚动条的位置
        direction: 'top',           //滚动条容器的top值, 会与 clientY 发生计算
        wheelDelta: 'deltaY'        //在滚动条容器中滚动 鼠标滚轮 时， 滚动量的值
      }
    };

    //根据方向初始化对应的属性配置
    this.config = this.horizontal ? configs['h'] : configs['v'];

  },
  destroyed() {
    off(document, 'mouseup', this.handlerClickUp);
    off(document, 'mousemove', this.handlerMove);
  }
};

var HappyScroll = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"happy-scroll",style:({ width: _vm.width + 'px', height: _vm.height + 'px' })},[_c('div',{ref:"container",staticClass:"happy-scroll-container",style:({ width: _vm.width + 15 + 'px', height: _vm.height + 15 + 'px' }),on:{"scroll":function($event){$event.stopPropagation();_vm.onScroll($event);}}},[_vm._t("default")],2),(!_vm.hideVertical && _vm.percentageY < 1)?_c('happy-scroll-strip',_vm._b({attrs:{"throttle":_vm.throttle,"percentage":_vm.percentageY,"move":_vm.moveY},model:{value:(_vm.slideY),callback:function ($$v) {_vm.slideY=$$v;},expression:"slideY"}},'happy-scroll-strip',_vm.$attrs,false)):_vm._e(),(!_vm.hideHorizontal && _vm.percentageX < 1)?_c('happy-scroll-strip',_vm._b({attrs:{"horizontal":"","throttle":_vm.throttle,"percentage":_vm.percentageX,"move":_vm.moveX},model:{value:(_vm.slideX),callback:function ($$v) {_vm.slideX=$$v;},expression:"slideX"}},'happy-scroll-strip',_vm.$attrs,false)):_vm._e()],1)},staticRenderFns: [],
  name: 'happy-scroll',
  inheritAttrs: false,
  props: {
    //容器宽度
    width: {
      type: Number,
      default: 300
    },
    //容器高度
    height: {
      type: Number,
      default: 280
    },
    //设置竖向滚动条的位置
    scrollTop: {
      type: [Number, String],
      default: 0
    },
    //设置横向滚动条的位置
    scrollLeft: {
      type: [Number, String],
      default: 0
    },
    //是否隐藏竖向滚动条
    hideVertical: Boolean,
    //是否隐藏横向滚动条
    hideHorizontal: Boolean,
    //鼠标移动的节流函数时间, 表示该时间内鼠标移动的回调保障在该时间内只执行一次
    throttle: {
      type: Number,
      default: 14 //默认14毫秒
    }
  },
  data() {
    return {
      //横向滚动条百分比
      percentageX: 0,
      moveX: 0, //slot dom元素滚动的位置
      slideX: 0, //鼠标拖动滚动条的位置
      //竖向滚动条百分比
      percentageY: 0,
      moveY: +this.scrollTop,
      slideY: +this.scrollLeft,
      //监听scroll事件的节流函数
      scrollThrottle: generateThrottle()
    }
  },
  watch: {
    //鼠标拖动滚动条时，移动slot元素到对应位置
    slideX() {
      this.$refs.container.scrollLeft = this.slideX / this.percentageX;
    },
    slideY() {
      this.$refs.container.scrollTop = this.slideY / this.percentageY;
    },
    scrollTop () {
      this.moveY = +this.scrollTop;
    },
    scrollLeft () {
      this.moveX = +this.scrollLeft;
    }
  },
  methods: {
    //监听dom元素的滚动事件，通知strip，将bar移动到对应位置
    onScroll(e) {
      //节流
      if(!this.scrollThrottle(Date.now())) return
      this.moveY = this.$refs.container.scrollTop;
      this.moveX = this.$refs.container.scrollLeft;
    }
  },
  components: {
    HappyScrollStrip
  },
  mounted() {
    //竖向滚动条高度与容器高度百分比
    this.percentageY = (this.$refs.container.clientHeight) / this.$refs.container.scrollHeight;
    //横向滚动条高度与容器高度百分比
    this.percentageX = this.$refs.container.clientWidth / this.$refs.container.scrollWidth;
  }
};

var version = "1.0.0";

if (typeof window !== 'undefined' && window.Vue) {
  Vue.component('happy-scroll', HappyScroll);
}

var index = {
  install (Vue) {
    Vue.component('happy-scroll', HappyScroll);
  },
  version
};

exports['default'] = index;
exports.HappyScroll = HappyScroll;
exports.version = version;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=happy-scroll.min.js.map
